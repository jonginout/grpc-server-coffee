plugins {
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.21'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.21'
    id 'com.google.protobuf' version '0.8.8'
    id 'idea'
}

apply plugin: 'io.spring.dependency-management'

group = 'site.jongin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
}

// kotlin lint
configurations {
    ktlint
}

ext {
    grpcSpringStarterVersion = '3.2.1'
    grpcVersion = '1.19.0'
    protobufVersion = '3.7.0'
    ktlintVersion = '0.31.0'
}

dependencies {

    // 선택 2 : 스프링에서 gRPC 서버와 서비스를 쉽게 등록하고 사용할 수 있는 자동설정 제공, 귀차니즘 해결, 위 선택1 의존성 5개 모두 포함하고 있음.
    implementation "io.github.lognet:grpc-spring-boot-starter:${grpcSpringStarterVersion}"

    // 선택 1 : gRPC 의존성
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntime 'com.h2database:h2'

    ktlint "com.github.shyiko:ktlint:${ktlintVersion}"
}

// Kotlin 컴파일러는 Java 8 바이트 코드 (Java 6이 기본값)를 생성하도록 구성되어 있습니다.
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

// generateProto task 설정
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// java로 컨버팅된 proto 코드의 위치를 sourceSet으로 설정하여 실제 로직에서 사용
sourceSets {
    main {
        java {
            srcDir 'build/generated/source/proto/main/java'
            srcDir 'build/generated/source/proto/main/grpc'
        }
    }

    test {
        java {
            srcDir 'build/generated/source/proto/test/java'
            srcDir 'build/generated/source/proto/test/grpc'
        }
    }
}

// Intellij 해당위치의 코드를 모듈로 인식
idea {
    module {
        sourceDirs += file("${projectDir}/src/main/proto")
        testSourceDirs += file("${projectDir}/src/test/proto")
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}
